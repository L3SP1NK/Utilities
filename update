#!/bin/bash

# Set color
reset_color="\e[0m"
bold="$\e[1m"
blue="\e[34m"
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
grey="\e[37m"

CWD=$(pwd)

which neofetch>/dev/null
if [[ ${?} -eq 0 ]]
	then
		neofetch
	else
		cat /etc/os-release
fi

function UPDATE_APT()
{
	echo -e "\n${yellow}Removing downloaded archive files and unused packages...${reset_color}"
	apt-get clean -y
	apt-get autoclean -y
	apt-get --autoremove --purge -y

	echo -e "\n${yellow}Configuring/fixing possibly broken packages...${reset_color}"
	dpkg --configure -a
	apt-get --fix-broken install

	echo -e "\n${yellow}Retrieving new lists of packages...${reset_color}"
	apt-get update

	echo -e "\n${yellow}Installing packages upgrades...${reset_color}"
	apt-get upgrade -y --with-new-pkgs
	apt-get dist-upgrade -y
	apt-get full-upgrade -y

	echo -e "\n${yellow}Configuring possibly broken packages...${reset_color}"
	dpkg --configure -a
	apt-get --fix-broken install

	echo -e "\n${yellow}Removing downloaded archive files and unused packages...${reset_color}"
	apt-get clean -y

	apt-get autoclean -y
	apt-get autoremove --purge -y

}

function UPDATE_NPM()
{
	echo -e "\n${yellow}Checking NPM installation...${reset_color}"
	npm doctor
	echo -e "\n${yellow}Auditing packages...${reset_color}"
	npm audit
	echo -e "\n${yellow}Updating NPM packages...${reset_color}"
	npm update
	cat /root/.npm/_logs/*
}

function UPDATE_FLATPAK()
{
	echo -e "\n${yellow}Flatpack installed:${reset_color}"
	flatpak list
	echo -e "\n${yellow}Updating flatpack...${reset_color}"
	flatpak update
}

GIT_REPO_LOCATION="/"
function UPDATE_GIT()
{
	cd ${GIT_REPO_LOCATION}
	# Search for GIT repos and pull them.
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git" 2>/dev/null)
		do
			cd ${GIT_PATH};
			echo -e "\n${blue}${bold}${GIT_PATH}${reset_color}"
			cd ..
			git stash
			git pull
			cd ${GIT_REPO_LOCATION}
		done
}

function UPDATE_KERNEL()
{
	FIRMWARE_PATH="/opt/FIRMWARE"
	echo -e "${yellow}Installing the linux firmware packages...${reset_color}"
	apt-get install -y firmware-linux firmware-linux-free firmware-linux-nonfree

	# Check if xorg.conf is configured
	ls /etc/X11/xorg.conf>/dev/null
	if [[ ${?} -eq 0 ]]
		then
			cat /etc/X11/xorg.conf | grep -e 'amdgpu'>/dev/null
			if [[ ${?} -eq 0 ]]
				then
					echo -e "${yellow}Cloning the linux firmware (+ the unofficial AMD) repositories...${reset_color}"
					mkdir -p ${FIRMWARE_PATH}
					cd ${FIRMWARE_PATH}
					git clone https://github.com/Umio-Yasuno/unofficial-amdgpu-firmware-repo.git 2>/dev/null
					if [[ ${?} -eq 128 ]]
						then
							echo -e '${yellow}The repository is already there !${reset_color}'
							echo -e "${yellow}Copying file...${reset_color}"
							cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
							cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
							update-initramfs -du
						else
							cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
							cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
							update-initramfs -du
						fi
				else
					echo "AMD driver is not loaded."
			fi
			echo -e "${yellow}Cloning the linux firmware repositories...${reset_color}"
			mkdir -p ${FIRMWARE_PATH}
			cd ${FIRMWARE_PATH}
			git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
			if [[ ${?} -eq 128 ]]
				then
					echo -e '${yellow}The repository is already there !${reset_color}'
					echo -e "${yellow}Copying file...${reset_color}"
					cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
					update-initramfs -du
				else
					cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
					update-initramfs -du
			fi
		else
			echo -e '${yellow}Xorg is not configured yet !${reset_color}'
			echo -e "${yellow}Stop the X sessions and run 'X -configure'.${reset_color}"
	fi

}

#clear

which apt-get > /dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${grey}$(date +%H:%M:%S)${reset_color}"
		echo -e "${yellow}${bold}$(apt list --installed | wc -l)${reset_color}${yellow} Packages currently installed.${reset_color}"
		echo -e "${yellow}Updating${bold} APT${reset_color}${yellow} packages...${reset_color}"
		UPDATE_APT 2>/dev/null
		echo -e '${green}Done !${reset_color}\n'
	else
		echo -e "${red}The${bold}APT${reset_color}${red} package manager is not installed on this system.${reset_color}"
fi

which flatpak > /dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${grey}$(date +%H:%M:%S)${reset_color}"
		echo -e "${yellow}${bold}Flatpak${reset_color}${yellow} is located at $(which flatpak).${reset_color}"
		echo -e "${yellow}You are using${bold} $(flatpak --version).${reset_color}"
		UPDATE_FLATPAK
		echo -e '${green}Done !${reset_color}\n'
	else
		echo -e "${red}${bold}Flatpak${reset_color}${red} is not installed on this system.${reset_color}"
fi

which npm>/dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${grey}$(date +%H:%M:%S)${reset_color}"
		echo -e "${yellow}${bold}NPM${reset_color}${yellow} is located at $(which npm).${reset_color}"
		echo -e "${yellow}Updating${bold}NPM${reset_color}${yellow} packages...${reset_color}"
		UPDATE_NPM
		echo -e '${green}Done !${reset_color}\n'
	else
		echo -e "${red}${bold}NPM${reset_color}${red} is not installed on this system.${reset_color}"
fi

which git>/dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${grey}$(date +%H:%M:%S)${reset_color}"
		echo -e "${yellow}${bold}Git${reset_color}${yellow} is located at $(which git).${reset_color}"
		echo -e "${yellow}Updating${bold} Git${reset_color}${yellow} repositories...${reset_color}"
		UPDATE_GIT
		echo -e '${green}Done !${reset_color}\n'
	else
		echo -e "${red}${bold}Git${reset_color}${red} is not installed on this system.${reset_color}"
fi

echo -e "\n${grey}$(date +%H:%M:%S)${reset_color}"
echo -e "${yellow}Updating${bold} kernel${reset_color}${yellow} ...${reset_color}"
UPDATE_KERNEL
echo -e "${green}Done !${reset_color}\n"

echo -e '${green}Update finished !${reset_color}\n'
