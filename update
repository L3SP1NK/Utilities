#!/bin/bash

clear

which neofetch>/dev/null
if [[ ${?} -eq 0 ]]
	then
		neofetch
	else
		cat /etc/os-release
fi

function UPDATE_APT()
{
	echo -e "\n\e[33mRemoving downloaded archive files and unused packages...\e[0m"
	apt clean -y
	apt autoclean -y
	apt autoremove --purge -y

	echo -e "\n\e[33mConfiguring/fixing possibly broken packages...\e[0m"
	dpkg --configure -a
	apt --fix-broken install

	echo -e "\n\e[33mRetrieving new lists of packages...\e[0m"
	apt update
	apt upgrade -y --with-new-pkgs

	echo -e "\n\e[33mRetrieving new lists of packages...\e[0m"
	apt update
	apt dist-upgrade -y --ignore-hold

	echo -e "\n\e[33mRetrieving new lists of packages...\e[0m"
	apt update
	apt full-upgrade -y

	echo -e "\n\e[33mConfiguring possibly broken packages...\e[0m"
	dpkg --configure -a
	apt --fix-broken install

	echo -e "\n\e[33mRemoving downloaded archive files and unused packages...\e[0m"
	apt clean -y
	apt autoclean -y
	apt autoremove --purge -y

}

function UPDATE_NPM()
{
	echo -e "\n\e[33mChecking NPM installation...\e[0m"
	npm doctor
	echo -e "\n\e[33mAuditing packages...\e[0m"
	npm audit
	echo -e "\n\e[33mUpdating NPM packages...\e[0m"
	npm update
	cat /root/.npm/_logs/*
}

function UPDATE_FLATPAK()
{
	echo -e "\n\e[33mFlatpack installed:\e[0m"
	flatpak list
	echo -e "\n\e[33mUpdating flatpack...\e[0m"
	flatpak update
}

GIT_REPO_LOCATION=/
function UPDATE_GIT()
{
	cd ${GIT_REPO_LOCATION}
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git")
		do
			cd ${GIT_PATH};
			echo -e "\n\e[34m\e[1m${GIT_PATH}\e[0m"
			cd ..
			git config pull.rebase false
			git stash
			git pull
			cd ${GIT_REPO_LOCATION}
		done
}

function UPDATE_KERNEL()
{
	cat /etc/X11/xorg.conf | grep -e 'amdgpu'
	if [[ ${?} -eq 0 ]]
		then
				cp -vur /opt/FIRMWARE/linux-firmware/* /lib/firmware
				cp -vur /opt/FIRMWARE/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
				update-initramfs -du
		else
				cp -vur /opt/FIRMWARE/linux-firmware/* /lib/firmware
				update-initramfs -du
	fi
}

echo -e "\n\e[37m\e[1m$(date +%H:%M:%S)\e[0m"
echo -e "\e[33m\e[1m$(apt list --installed | wc -l)\e[0m\e[33m Packages currently installed.\e[0m"
echo -e "\e[33mUpdating\e[1m APT\e[0m\e[33m packages...\e[0m"
UPDATE_APT 2>/dev/null
echo -e '\e[32mDone !\e[0m\n'


which flatpak > /dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n\e[37m\e[1m$(date +%H:%M:%S)\e[0m"
		echo -e "\e[33m\e[1mFlatpak\e[0m\e[33m is located at $(which flatpak).\e[0m"
		echo -e "\e[33mYou are using\e[1m $(flatpak --version).\e[0m"
		UPDATE_FLATPAK
		echo -e '\e[32mDone !\e[0m\n'
else
		echo -e "\e[33m\e[1mFlatpak\e[0m\e[33m isn't installed.\e[0m"
fi

which npm>/dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n\e[37m\e[1m$(date +%H:%M:%S)\e[0m"
		echo -e "\e[33m\e[1mNPM\e[0m\e[33m is located at $(which npm).\e[0m"
		echo -e "\e[33mUpdating\e[1mNPM\e[0m\e[33m packages...\e[0m"
		UPDATE_NPM
		echo -e '\e[32mDone !\e[0m\n'
	else
		echo -e "\e[33m\e[1mNPM\e[0m\e[33m isn't installed.\e[0m"
fi

which git>/dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n\e[37m\e[1m$(date +%H:%M:%S)\e[0m"
		echo -e "\e[33m\e[1mGit\e[0m\e[33m is located at $(which git).\e[0m"
		echo -e "\e[33mUpdating\e[1m GIT\e[0m\e[33m repositories...\e[0m"
		UPDATE_GIT
		echo -e '\e[32mDone !\e[0m\n'
	else
		echo -e "\e[33m\e[1mGit\e[0m\e[33m isn't installed.\e[0m"
fi

echo -e "\n\e[37m\e[1m$(date +%H:%M:%S)\e[0m"
echo -e "\e[33mUpdating\e[1m kernel\e[0m\e[33m ...\e[0m"
UPDATE_KERNEL
echo -e '\e[32mDone !\e[0m\n'

echo -e "\e[32mUpdate finnished !\e[0m\n"
